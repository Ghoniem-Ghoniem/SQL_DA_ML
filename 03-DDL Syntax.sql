if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetAdjustmentsValues]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[GetAdjustmentsValues]



CREATE FUNCTION  dbo.GetVendEval (@WeightCode varchar(50), @PriceEval int,@QtyEval int,@LeadTimeEval int)
RETURNS int
 with RETURNS NULL ON NULL INPUT AS
begin
declare @NumValue int;
set @NumValue = (SELECT (EVALWGT_PRICEEVAL*@PriceEval + EVALWGT_QTYEVAL*@QtyEval +EVALWGT_LEADTIMEEVAL*@LeadTimeEval)/100 FROM VWCMN_EVALWGT WHERE EVALWGT_CODE = @WeightCode);
RETURN (@NumValue);
END;

IF EXISTS (SELECT * FROM DBO.SYSOBJECTS WHERE ID = OBJECT_ID(N'[VW_LASTITEMSTXN_FULLDATA]') AND OBJECTPROPERTY(ID, N'ISVIEW') = 1) drop view VW_LASTITEMSTXN_FULLDATA



create VIEW VWMMS_MTITEM AS 
SELECT MT_DBASEFROM as item_store,MTITEM_CODE as item_code,YEAR (MT_CONFRMDATE) AS item_YEAR,MONTH (MT_CONFRMDATE) AS item_MONTH,SUM(MTITEM_QUANTITY) as item_CONSUMPPERYEAR
FROM MMS_MT,MMS_MTITEM 
WHERE 
MMS_MT.MT_CODE = MMS_MTITEM.MTITEM_MT
AND 
MMS_MT.mt_FROMTOTYPE = 'S/D' 
and mt_mtstatus = 'C'
GROUP BY
MT_DBASEFROM,MTITEM_CODE ,YEAR (MT_CONFRMDATE),MONTH (MT_CONFRMDATE)

union
SELECT MT_DBASETO as item_store,MTITEM_CODE as item_code,YEAR (MT_CONFRMDATE) AS item_YEAR,MONTH (MT_CONFRMDATE) AS item_MONTH,SUM(MTITEM_QUANTITY*-1) as item_CONSUMPPERYEAR
FROM MMS_MT,MMS_MTITEM 
WHERE 
MMS_MT.MT_CODE = MMS_MTITEM.MTITEM_MT
AND 
MMS_MT.mt_FROMTOTYPE = 'D/S'
and mt_mtstatus = 'C'
GROUP BY
MT_DBASETO,MTITEM_CODE ,YEAR (MT_CONFRMDATE),MONTH (MT_CONFRMDATE)


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CreateMonthlyClosingInfo]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CreateMonthlyClosingInfo]




IF EXISTS (SELECT * FROM dbo.SYSOBJECTS WHERE ID = OBJECT_ID(N'[MMS_POADDEXP_UPTVAL]') AND OBJECTPROPERTY(ID, N'ISTRIGGER') = 1)
DROP TRIGGER MMS_POADDEXP_UPTVAL




CREATE INDEX MTITEM_CODE_INDX ON MMS_MTITEM(MTITEM_CODE)

create unique index impexputltabs_U on cmn_impexputltabs(IMPEXPUTLTABS_TNAME,APPTABLEINDEX)



update mms_mt set MT_CONFRMDATE  = MT_MTDATE where MT_CONFRMDATE  is null




create PROCEDURE [dbo].[MakeItemsControlForCCV]	@strCCVCode varchar(50)
AS
begin

DELETE FROM MMS_ITEMHIST WHERE ITEMHIST_TRANSTYPE IN ('CCV' ,'CCV-' ,'CCV+') AND ITEMHIST_TRANSNO =@strCCVCode;
INSERT INTO MMS_ITEMHIST ( ITEMHIST_CODE, ITEMHIST_QTYTRANS, ITEMHIST_TRANSTYPE,ITEMHIST_CONFIRMDATE,ITEMHIST_ITHDATE,ITEMHIST_TRANSNO,ITEMHIST_ITHFROM,ITEMHIST_ITHTO)
 SELECT MMS_CCVITEM.CCVITEM_FROMITEM, MMS_CCVITEM.CCVITEM_FROMQTY, 'CCV-' AS Expr1,CCV_CONFIRMDATE, CCV_DATE,CCV_CODE,CCV_STORE,NULL
 FROM MMS_CCVITEM,MMS_CCV 
 WHERE MMS_CCVITEM.CCVITEM_CCV=MMS_CCV.CCV_CODE AND MMS_CCVITEM.CCVITEM_CCV=@strCCVCode 
UNION
 SELECT MMS_CCVITEM.CCVITEM_TOITEM, SUM(MMS_CCVITEM.CCVITEM_FROMQTY) AS TOTQTY, 'CCV+' AS Expr1,CCV_CONFIRMDATE, CCV_DATE,CCV_CODE,NULL,CCV_STORE
 FROM MMS_CCVITEM,MMS_CCV
 WHERE MMS_CCVITEM.CCVITEM_CCV=MMS_CCV.CCV_CODE AND MMS_CCVITEM.CCVITEM_CCV=@strCCVCode 
 GROUP BY CCVITEM_TOITEM,CCV_CONFIRMDATE, CCV_DATE,CCV_CODE,CCV_STORE;
 
 UPDATE MMS_ITEMHIST SET MMS_ITEMHIST.ITEMHIST_ONHAND = STCKITEM_TOTALQTY, MMS_ITEMHIST.ITEMHIST_STOREONHAN =  STORITEM_ONHAND,MMS_ITEMHIST.ITEMHIST_PRICE =MMS_STORITEM.STORITEM_LASTPRICE FROM MMS_STORITEM ,MMS_STCKITEM WHERE MMS_STORITEM.STORITEM_STORECODE = MMS_ITEMHIST.ITEMHIST_ITHFROM AND MMS_ITEMHIST.ITEMHIST_CODE = MMS_STORITEM.STORITEM_STOCKITEM AND MMS_ITEMHIST.ITEMHIST_CODE = MMS_STCKITEM.STCKITEM_CONCATENATED AND MMS_ITEMHIST.ITEMHIST_TRANSNO = @strCCVCode AND (MMS_ITEMHIST.ITEMHIST_TRANSTYPE = 'CCV-' OR MMS_ITEMHIST.ITEMHIST_TRANSTYPE = 'CCV' OR MMS_ITEMHIST.ITEMHIST_TRANSTYPE = 'CCV+');
 
 UPDATE MMS_ITEMHIST SET MMS_ITEMHIST.ITEMHIST_ONHAND = STCKITEM_TOTALQTY, MMS_ITEMHIST.ITEMHIST_STOREONHAN =  STORITEM_ONHAND,MMS_ITEMHIST.ITEMHIST_PRICE =MMS_STORITEM.STORITEM_LASTPRICE FROM MMS_STORITEM ,MMS_STCKITEM WHERE MMS_STORITEM.STORITEM_STORECODE = MMS_ITEMHIST.ITEMHIST_ITHTO AND MMS_ITEMHIST.ITEMHIST_CODE = MMS_STORITEM.STORITEM_STOCKITEM AND MMS_ITEMHIST.ITEMHIST_CODE = MMS_STCKITEM.STCKITEM_CONCATENATED AND MMS_ITEMHIST.ITEMHIST_TRANSNO = @strCCVCode AND (MMS_ITEMHIST.ITEMHIST_TRANSTYPE = 'CCV-' OR MMS_ITEMHIST.ITEMHIST_TRANSTYPE = 'CCV' OR MMS_ITEMHIST.ITEMHIST_TRANSTYPE = 'CCV+');
UPDATE MMS_ITEMHIST SET ITEMHIST_ACCFROM = STORE_ACCOUNT , ITEMHIST_CSFROM = STORE_COSTCENT FROM MMS_STORE WHERE MMS_STORE.STORE_CODE = MMS_ITEMHIST.ITEMHIST_ITHFROM AND ITEMHIST_ACCFROM IS NULL AND (MT_TYPE IS NULL OR MT_TYPE <> 'D/S' OR MT_TYPE <> 'C/S');
UPDATE MMS_ITEMHIST SET ITEMHIST_ACCTO = STORE_ACCOUNT , ITEMHIST_CSTO = STORE_COSTCENT FROM MMS_STORE WHERE MMS_STORE.STORE_CODE = MMS_ITEMHIST.ITEMHIST_ITHTO AND ITEMHIST_ACCTO IS NULL AND (MT_TYPE IS NULL OR MT_TYPE <> 'S/D' OR MT_TYPE <> 'S/C');


end



create TRIGGER [dbo].[MMS_MT_REVISEFINANCEINFO] ON [dbo].[MMS_MT] 
AFTER UPDATE
AS
IF NOT ( UPDATE (MT_ACCFROM) OR UPDATE (MT_ACCTO) OR UPDATE (MT_FROMCOSTCENTER) OR UPDATE (MT_TOCOSTCENTER))
RETURN
SET NOCOUNT ON --TO PREVENT THE MESSAGE APPEARS FROM THE SYSTEM
--ROW CANNOT BE LOCATED SINCE IT WAS LAST UPDATED

BEGIN

UPDATE MMS_ITEMHIST SET ITEMHIST_ACCFROM = INSERTED.MT_ACCFROM,ITEMHIST_ACCTO = INSERTED.MT_ACCTO,ITEMHIST_CSFROM = INSERTED.MT_FROMCOSTCENTER,ITEMHIST_CSTO = INSERTED.MT_TOCOSTCENTER 
FROM INSERTED WHERE INSERTED.MT_CODE = ITEMHIST_TRANSNO AND ITEMHIST_TRANSTYPE = 'MT' 

SET NOCOUNT off
	
END



ALTER TABLE dbo.FMS_ACSRYLOG ADD CONSTRAINT 
	FK_FMS_ACSRYLOG_FMS_ACSRY_MAIN_DETAIL FOREIGN KEY
	(
	ACSRYLOG_ACSRYCOD
	) REFERENCES dbo.FMS_ACSRY
	(
	ACSRY_COD
	) ON UPDATE CASCADE
	 ON DELETE CASCADE


	 ALTER TABLE CMN_SEGCODE  DROP CONSTRAINT FK_CMN_SEGCODE_SEGCODE_APPCODE_SEGCODE_TABLENAME